package edu.kit.ipd.sdq.kamp4attack.tests.casestudies.travelplanner;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;

import java.util.Set;

import org.junit.jupiter.api.Test;
import org.palladiosimulator.pcm.confidentiality.context.system.pcm.structure.ServiceRestriction;

public class VulnerabilityAttackVectorLocalFailureTests extends TravelPlannerCaseStudy {

    public VulnerabilityAttackVectorLocalFailureTests() {
        this.PATH_ATTACKER = "travelplanner/Attacker_Propagation_Accuracy/06/02/test_model.attacker";
        this.PATH_CONTEXT = "travelplanner/Attacker_Propagation_Accuracy/06/02/test_model.context";
        this.PATH_MODIFICATION = "travelplanner/Attacker_Propagation_Accuracy/06/02/test_model.kamp4attackmodificationmarks";
    }

    @Test
    void propagation() {
        runAnalysis();

        var change = getCredentials();

        assertEquals(1, change.getCompromisedassembly().size());
        assertEquals(0, change.getCompromisedlinkingresource().size());
        assertEquals(0, change.getCompromisedresource().size());
        assertEquals(2, change.getCompromisedservice().size());
        assertEquals(0, change.getContextchange().size());

        assertTrue(checkAssembly(change));
        assertTrue(checkServiceRestriction(change));

    }

    @Override
    protected boolean assemblyNameMatch(String name) {
        var set = Set.of("TravelAgency <TravelAgency>");
        return set.contains(name);
    }

    @Override
    protected boolean checkServiceRestriction(ServiceRestriction servicerestriction1) {
        var setAssembly = Set.of(
                "TravelAgency <TravelAgency>");

        var equalAssembly = setAssembly.contains(servicerestriction1.getAssemblycontext().getEntityName());
        if (!equalAssembly) {
            return equalAssembly;
        }
        var setServices = Set.of(
                "_brO1YN5fEeeel_96Qa_d5A", "_KubVAC2VEeuHsNng7h4KwA");
        // the pay commision method is not reachable since it is in another network
        var returnValue = setServices.contains(servicerestriction1.getService().getId());
        return returnValue;
    }
}
