package edu.kit.ipd.sdq.kamp4attack.tests.change.vulnerability.scalability;

import static org.junit.Assert.fail;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.nio.file.StandardOpenOption;
import java.util.ArrayList;

import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.palladiosimulator.pcm.confidentiality.attacker.helper.VulnerabilityHelper;
import org.palladiosimulator.pcm.confidentiality.attackerSpecification.AttackerSystemSpecificationContainer;
import org.palladiosimulator.pcm.confidentiality.attackerSpecification.pcmIntegration.PcmIntegrationFactory;
import org.palladiosimulator.pcm.confidentiality.attackerSpecification.pcmIntegration.VulnerabilitySystemIntegration;
import org.palladiosimulator.pcm.resourceenvironment.ResourceContainer;
import org.palladiosimulator.pcm.resourceenvironment.ResourceEnvironment;

import edu.kit.ipd.sdq.kamp4attack.model.modificationmarks.KAMP4attackModificationmarks.CredentialChange;
import edu.kit.ipd.sdq.kamp4attack.tests.change.AbstractChangeTests;

public abstract class ScalabilityTests extends AbstractChangeTests {
    public static final int WARMUP = 0;
    public static final int REPEAT = 1;
    public ScalabilityTests() {
        this.PATH_REPOSITORY = "travelplanner/default.repository";
        this.PATH_RESOURCES = "travelplanner/default.resourceenvironment";
        this.PATH_ASSEMBLY = "travelplanner/default.system";
        this.PATH_ALLOCATION = "travelplanner/default.allocation";
        this.PATH_ATTACKER = "travelplanner/Scalability/test_model.attacker";
        this.PATH_CONTEXT = "travelplanner/Scalability/test_model.context";
        this.PATH_MODIFICATION = "travelplanner/Scalability/test_model.kamp4attackmodificationmarks";
    }

    @Disabled
    @Test
    void warmup() {
        runAnalysis();
    }

    @Disabled
    @Test
    void run() {

        for (var i = 0; i < WARMUP; i++) {
            runAnalysis();
        }

//        for (var i = 0; i < 1; i++) {
//            perform(this.environment, 1000, this.attacker.getSystemintegration());
//
//            var timeList = new ArrayList<Long>();
//
//            for (var j = 0; j < REPEAT; j++) {
//                timeList.add(analysisTime());
//            }
//
//            try (var output = Files.newBufferedWriter(Paths.get(System.getProperty("java.io.tmpdir"), getFilename()),
//                    StandardOpenOption.APPEND);) {
//                var credential = (CredentialChange) getBlackboardWrapper().getModificationMarkRepository()
//                        .getChangePropagationSteps().get(0);
//                output.append(String.format("%d,%d\n", credential.getCompromisedresource().size(),
//                        Math.round(timeList.stream().mapToLong(Long::longValue).average().getAsDouble())));
//
//            } catch (IOException e) {
//                fail(e.getMessage());
//            }
//
//        }
        perform(this.environment, 10, this.attacker.getSystemintegration());
        writeResults();
        perform(this.environment, 90, this.attacker.getSystemintegration());
        writeResults();
        perform(this.environment, 900, this.attacker.getSystemintegration());
        writeResults();
        perform(this.environment, 9000, this.attacker.getSystemintegration());
        writeResults();
        perform(this.environment, 90000, this.attacker.getSystemintegration());
        writeResults();
        perform(this.environment, 900000, this.attacker.getSystemintegration());
        writeResults();
    }

    private void writeResults() {
        var timeList = new ArrayList<Long>();

        for (var j = 0; j < REPEAT; j++) {
            timeList.add(analysisTime());
        }

        try (var output = Files.newBufferedWriter(Paths.get(System.getProperty("java.io.tmpdir"), getFilename()),
                StandardOpenOption.APPEND);) {
            var credential = (CredentialChange) getBlackboardWrapper().getModificationMarkRepository()
                    .getChangePropagationSteps().get(0);
            output.append(String.format("%d,%d\n", credential.getCompromisedresource().size(),
                    Math.round(timeList.stream().mapToLong(Long::longValue).average().getAsDouble())));

        } catch (IOException e) {
            fail(e.getMessage());
        }
    }

    long analysisTime() {
        var startTime = java.lang.System.currentTimeMillis();
        runAnalysis();
        return java.lang.System.currentTimeMillis() - startTime;
    }

    private void perform(ResourceEnvironment environment, int numberAddition,
            AttackerSystemSpecificationContainer attacks) {
        var origin = environment.getResourceContainer_ResourceEnvironment().get(1);
        var vulnerability = VulnerabilityHelper.getVulnerabilities(attacks, origin);
        for (var i = 0; i < numberAddition; i++) {

            var integration = PcmIntegrationFactory.eINSTANCE.createVulnerabilitySystemIntegration();
            integration.setVulnerability(vulnerability.get(0));

            origin = resourceAddOperation(environment, origin, integration);
            attacks.getVulnerabilities().add(integration);
        }
    }

    protected abstract ResourceContainer resourceAddOperation(ResourceEnvironment environment, ResourceContainer origin,
            VulnerabilitySystemIntegration integration);

    protected abstract String getFilename();



}
