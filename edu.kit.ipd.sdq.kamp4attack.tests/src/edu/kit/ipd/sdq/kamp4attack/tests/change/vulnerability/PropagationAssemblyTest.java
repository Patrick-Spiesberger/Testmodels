package edu.kit.ipd.sdq.kamp4attack.tests.change.vulnerability;

import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertTrue;
import static org.junit.Assert.fail;
import static org.junit.jupiter.api.Assertions.assertEquals;

import java.util.Optional;

import org.eclipse.emf.ecore.util.EcoreUtil;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.palladiosimulator.pcm.allocation.AllocationContext;
import org.palladiosimulator.pcm.confidentiality.attackerSpecification.attackSpecification.AttackVector;
import org.palladiosimulator.pcm.confidentiality.attackerSpecification.attackSpecification.ConfidentialityImpact;
import org.palladiosimulator.pcm.confidentiality.attackerSpecification.attackSpecification.Privileges;
import org.palladiosimulator.pcm.confidentiality.attackerSpecification.pcmIntegration.PcmIntegrationFactory;
import org.palladiosimulator.pcm.confidentiality.context.system.UsageSpecification;
import org.palladiosimulator.pcm.confidentiality.context.system.pcm.structure.StructureFactory;
import org.palladiosimulator.pcm.core.composition.AssemblyContext;
import org.palladiosimulator.pcm.repository.BasicComponent;
import org.palladiosimulator.pcm.resourceenvironment.ResourceContainer;
import org.palladiosimulator.pcm.seff.ResourceDemandingSEFF;

import edu.kit.ipd.sdq.kamp4attack.core.changepropagation.changes.AssemblyContextPropagationVulnerability;
import edu.kit.ipd.sdq.kamp4attack.model.modificationmarks.KAMP4attackModificationmarks.CompromisedAssembly;
import edu.kit.ipd.sdq.kamp4attack.model.modificationmarks.KAMP4attackModificationmarks.CredentialChange;
import edu.kit.ipd.sdq.kamp4attack.model.modificationmarks.KAMP4attackModificationmarks.KAMP4attackModificationmarksFactory;
import edu.kit.ipd.sdq.kamp4attack.tests.change.AbstractChangeTests;

class PropagationAssemblyTest extends AbstractChangeTests {

    private Optional<ResourceContainer> getResource(final CompromisedAssembly infectedAssembly) {
        return this.getResource(infectedAssembly.getAffectedElement().getCompromisedComponents().get(0));
    }

    private Optional<ResourceContainer> getResource(final AssemblyContext infectedAssembly) {
        final var resourceOpt = this.allocation.getAllocationContexts_Allocation().stream()
                .filter(e -> EcoreUtil.equals(e.getAssemblyContext_AllocationContext(), infectedAssembly))
                .map(AllocationContext::getResourceContainer_AllocationContext).findAny();
        if (resourceOpt.isEmpty()) {
            fail("Wrong Test Input");
        }
        return resourceOpt;
    }

    private void runAssemblyResourcePropagation(final CredentialChange change) {
        final var wrapper = getBlackboardWrapper();
        final var assemblyChange = new AssemblyContextPropagationVulnerability(wrapper, change);
        assemblyChange.calculateAssemblyContextToLocalResourcePropagation();
        assemblyChange.calculateAssemblyContextToRemoteResourcePropagation();
    }

    private void runAssemblyAssemblyPropagation(final CredentialChange change) {
        generateXML();
        final var wrapper = getBlackboardWrapper();
        final var assemblyChange = new AssemblyContextPropagationVulnerability(wrapper, change);
        assemblyChange.calculateAssemblyContextToAssemblyContextPropagation();
    }

    private void runAssemblyLinkingPropagation(final CredentialChange change) {
        final var wrapper = getBlackboardWrapper();
        final var assemblyChange = new AssemblyContextPropagationVulnerability(wrapper, change);
        assemblyChange.calculateAssemblyContextToLinkingResourcePropagation();
    }

    @BeforeEach
    void initXML() {
        generateXML();
    }

    @Test
    void testAssemblyToLocalResourcePropagation() {

        final var change = KAMP4attackModificationmarksFactory.eINSTANCE.createCredentialChange();

        final var cweID = createSimpleAttack();

        final var infectedAssembly = this.createAssembly(change);

        final var vulnerability = createCWEVulnerability(cweID, AttackVector.LOCAL, Privileges.NONE,
                ConfidentialityImpact.HIGH, true, null);
        final var integration = PcmIntegrationFactory.eINSTANCE.createVulnerabilitySystemIntegration();
        final var pcmElement = PcmIntegrationFactory.eINSTANCE.createPCMElement();
        integration.setPcmelement(pcmElement);
        integration.setVulnerability(vulnerability);
        pcmElement.setResourcecontainer(this.getResource(infectedAssembly).get());
        this.attacker.getSystemintegration().getVulnerabilities().add(integration);

        runAssemblyResourcePropagation(change);
        // TODO consider Data
        assertEquals(1, change.getCompromisedresource().size());
        assertTrue(EcoreUtil.equals(change.getCompromisedresource().get(0).getAffectedElement(),
                this.getResource(infectedAssembly).get()));
        assertTrue(change.getCompromisedlinkingresource().isEmpty());
        assertEquals(1, change.getCompromisedassembly().size());
        assertTrue(EcoreUtil.equals(change.getCompromisedassembly().get(0), infectedAssembly));
        assertTrue(change.isChanged());

    }

    // TODO special cases

    @Test
    void testAssemblyToRemoteResourcePropagation() {

        final var change = KAMP4attackModificationmarksFactory.eINSTANCE.createCredentialChange();

        final var cweID = createSimpleAttack();

        final var infectedAssembly = this.createAssembly(change);


        final var vulnerability = createCWEVulnerability(cweID, AttackVector.NETWORK, Privileges.NONE,
                ConfidentialityImpact.HIGH, true, null);
        final var integration = PcmIntegrationFactory.eINSTANCE.createVulnerabilitySystemIntegration();
        final var pcmElement = PcmIntegrationFactory.eINSTANCE.createPCMElement();
        integration.setPcmelement(pcmElement);
        integration.setVulnerability(vulnerability);
        pcmElement.setResourcecontainer(
                this.getResource(this.assembly.getAssemblyContexts__ComposedStructure().get(2)).get());
        this.attacker.getSystemintegration().getVulnerabilities().add(integration);
        runAssemblyResourcePropagation(change);

        assertEquals(1, change.getCompromisedresource().size());
        assertTrue(EcoreUtil.equals(change.getCompromisedresource().get(0).getAffectedElement(),
                this.getResource(this.assembly.getAssemblyContexts__ComposedStructure().get(2)).get()));
        assertTrue(change.getCompromisedlinkingresource().isEmpty());
        
        assertEquals(1, change.getCompromisedassembly().size());
        assertTrue(EcoreUtil.equals(change.getCompromisedassembly().get(0), infectedAssembly));
        assertTrue(change.isChanged());
    }

    // TODO fix methodspecification bug
    @Test
    void testAssemblyToAssemblyPropagationAuthenticated() {

        final var change = KAMP4attackModificationmarksFactory.eINSTANCE.createCredentialChange();

        final var cweID = createSimpleAttack();


        final var infectedAssembly = this.createAssembly(change,
                this.assembly.getAssemblyContexts__ComposedStructure().get(2));

        var usage = findContextWithName("root");
        createContextChange(usage, change);

        final var vulnerability = createCWEVulnerability(cweID, AttackVector.NETWORK, Privileges.LOW,
                ConfidentialityImpact.HIGH, true, null);
        final var integration = PcmIntegrationFactory.eINSTANCE.createVulnerabilitySystemIntegration();
        final var pcmElement = PcmIntegrationFactory.eINSTANCE.createPCMElement();
        integration.setPcmelement(pcmElement);
        integration.setVulnerability(vulnerability);

        var serviceRestriction = StructureFactory.eINSTANCE.createServiceRestriction();
        var component = this.assembly.getAssemblyContexts__ComposedStructure().get(1);
        serviceRestriction.setAssemblycontext(component);
        var componentRepository = (BasicComponent) component.getEncapsulatedComponent__AssemblyContext();
        serviceRestriction.setSignature(componentRepository.getServiceEffectSpecifications__BasicComponent().get(0)
                .getDescribedService__SEFF());
        serviceRestriction.setService(
                (ResourceDemandingSEFF) componentRepository.getServiceEffectSpecifications__BasicComponent().get(0));
        pcmElement.setMethodspecification(serviceRestriction);

        this.attacker.getSystemintegration().getVulnerabilities().add(integration);
        runAssemblyAssemblyPropagation(change);

        final var data = change.getCompromiseddata();
        assertFalse(data.isEmpty());

        assertTrue(change.getCompromisedresource().isEmpty());
        assertTrue(change.getCompromisedlinkingresource().isEmpty());
        assertEquals(2, change.getCompromisedassembly().size());
        assertTrue(EcoreUtil.equals(change.getCompromisedassembly().get(0), infectedAssembly));
        assertTrue(EcoreUtil.equals(change.getCompromisedassembly().get(1).getAffectedElement().getCompromisedComponents().get(0),
                this.assembly.getAssemblyContexts__ComposedStructure().get(1)));
        assertTrue(change.isChanged());
    }

    private UsageSpecification findContextWithName(String string) {
        var listUsage = this.context.getPcmspecificationcontainer().getUsagespecification();
        return listUsage.stream().filter(e -> e.getAttributevalue().getValues().get(0).equals(string)).findAny().get();
    }

    @Test
    void testAssemblyToAssemblyPropagation() {

        final var change = KAMP4attackModificationmarksFactory.eINSTANCE.createCredentialChange();

        final var cweID = createSimpleAttack();

        final var infectedAssembly = this.createAssembly(change);

        final var vulnerability = createCWEVulnerability(cweID, AttackVector.NETWORK, Privileges.NONE,
                ConfidentialityImpact.HIGH, true, null);
        final var integration = PcmIntegrationFactory.eINSTANCE.createVulnerabilitySystemIntegration();
        final var pcmElement = PcmIntegrationFactory.eINSTANCE.createPCMElement();
        integration.setPcmelement(pcmElement);
        integration.setVulnerability(vulnerability);
        pcmElement.setAssemblycontext(this.assembly.getAssemblyContexts__ComposedStructure().get(2));
        this.attacker.getSystemintegration().getVulnerabilities().add(integration);
        runAssemblyAssemblyPropagation(change);

        final var data = change.getCompromiseddata();

        assertFalse(data.isEmpty());
        //        var create = new FluentRepositoryFactory();
        //        var repo = create.newRepository().withImportedResource(this.assembly.getAssemblyContexts__ComposedStructure().get(0).getEncapsulatedComponent__AssemblyContext().getRepository__RepositoryComponent());
        //        var dataType = create.fetchOfDataType("New Repository.User");

        assertTrue(change.getCompromisedresource().isEmpty());
        assertTrue(change.getCompromisedlinkingresource().isEmpty());
        assertEquals(2, change.getCompromisedassembly().size());
        assertTrue(EcoreUtil.equals(change.getCompromisedassembly().get(0), infectedAssembly));
        System.out.println(change.getCompromisedassembly().get(1).getAffectedElement()
				.getCompromisedComponents().get(0).getEntityName());
        System.out.println(this.assembly.getAssemblyContexts__ComposedStructure().get(2).getEntityName());
		assertTrue(EcoreUtil.equals(change.getCompromisedassembly().get(1).getAffectedElement()
				.getCompromisedComponents().get(0),
                this.assembly.getAssemblyContexts__ComposedStructure().get(2)));
        assertTrue(change.isChanged());
    }

    @Test
    void testAssemblyToAssemblyPropagationUsingSeff() {

        final var change = KAMP4attackModificationmarksFactory.eINSTANCE.createCredentialChange();

        final var cweID = createSimpleAttack();

        final var infectedAssembly = this.createAssembly(change,
                this.assembly.getAssemblyContexts__ComposedStructure().get(2));

        final var vulnerability = createCWEVulnerability(cweID, AttackVector.NETWORK, Privileges.NONE,
                ConfidentialityImpact.HIGH, true, null);

        final var methodSpecification = StructureFactory.eINSTANCE.createServiceRestriction();
        final var seff = ((BasicComponent) this.assembly.getAssemblyContexts__ComposedStructure().get(0)
                .getEncapsulatedComponent__AssemblyContext()).getServiceEffectSpecifications__BasicComponent().get(0);
        methodSpecification.setAssemblycontext(this.assembly.getAssemblyContexts__ComposedStructure().get(0));
        methodSpecification.setService((ResourceDemandingSEFF) seff);
        methodSpecification.setSignature(seff.getDescribedService__SEFF());

        final var integration = PcmIntegrationFactory.eINSTANCE.createVulnerabilitySystemIntegration();
        var element = PcmIntegrationFactory.eINSTANCE.createPCMElement();
        element.setMethodspecification(methodSpecification);
        integration.setVulnerability(vulnerability);
        integration.setPcmelement(element);
        this.attacker.getSystemintegration().getVulnerabilities().add(integration);
        runAssemblyAssemblyPropagation(change);

        assertTrue(change.getCompromisedresource().isEmpty());
        assertTrue(change.getCompromisedlinkingresource().isEmpty());
        assertEquals(2, change.getCompromisedassembly().size());
        assertTrue(EcoreUtil.equals(change.getCompromisedassembly().get(0), infectedAssembly));
        assertTrue(EcoreUtil.equals(change.getCompromisedassembly().get(1).getAffectedElement().getCompromisedComponents().get(0),
                this.assembly.getAssemblyContexts__ComposedStructure().get(0)));
        assertTrue(change.isChanged());
    }

    @Test
    void testAssemblyToLinkingResource() {

        final var change = KAMP4attackModificationmarksFactory.eINSTANCE.createCredentialChange();

        final var cweID = createSimpleAttack();

        final var infectedAssembly = this.createAssembly(change);

        final var vulnerability = createCWEVulnerability(cweID, AttackVector.NETWORK, Privileges.NONE,
                ConfidentialityImpact.HIGH, true, null);

        final var linking = this.environment.getLinkingResources__ResourceEnvironment().get(0);
        final var integration = PcmIntegrationFactory.eINSTANCE.createVulnerabilitySystemIntegration();
        final var pcmElement = PcmIntegrationFactory.eINSTANCE.createPCMElement();
        integration.setPcmelement(pcmElement);
        integration.setVulnerability(vulnerability);
        pcmElement.setLinkingresource(linking);
        this.attacker.getSystemintegration().getVulnerabilities().add(integration);
        runAssemblyLinkingPropagation(change);

        assertTrue(change.getCompromiseddata().isEmpty());
        assertTrue(change.getCompromisedresource().isEmpty());
        assertEquals(1, change.getCompromisedlinkingresource().size());
        assertTrue(EcoreUtil.equals(change.getCompromisedlinkingresource().get(0).getAffectedElement(), linking));
        assertEquals(1, change.getCompromisedassembly().size());
        assertTrue(EcoreUtil.equals(change.getCompromisedassembly().get(0), infectedAssembly));
        assertTrue(change.isChanged());
    }

    @Test
    void testAssemblyToLinkingResourceOnlyLocal() {

        final var change = KAMP4attackModificationmarksFactory.eINSTANCE.createCredentialChange();

        final var cweID = createSimpleAttack();

        final var infectedAssembly = this.createAssembly(change);

        final var vulnerability = createCWEVulnerability(cweID, AttackVector.LOCAL, Privileges.NONE,
                ConfidentialityImpact.HIGH, true, null);

        final var linking = this.environment.getLinkingResources__ResourceEnvironment().get(0);
        final var integration = PcmIntegrationFactory.eINSTANCE.createVulnerabilitySystemIntegration();
        final var pcmElement = PcmIntegrationFactory.eINSTANCE.createPCMElement();
        integration.setPcmelement(pcmElement);
        integration.setVulnerability(vulnerability);
        pcmElement.setLinkingresource(linking);
        this.attacker.getSystemintegration().getVulnerabilities().add(integration);
        runAssemblyLinkingPropagation(change);

        assertTrue(change.getCompromiseddata().isEmpty());
        assertTrue(change.getCompromisedresource().isEmpty());
        assertTrue(change.getCompromisedlinkingresource().isEmpty());
        assertEquals(1, change.getCompromisedassembly().size());
        assertTrue(EcoreUtil.equals(change.getCompromisedassembly().get(0), infectedAssembly));
        assertFalse(change.isChanged());
    }

}
